// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id     String @id @default(uuid())
  token  String @db.VarChar(250)
  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model User {
  id           String         @id @default(uuid())
  name         String
  email        String         @unique
  password     String
  profileImage String
  tokens       RefreshToken[]
  boards       Board[]
  memberIn     Member[]
  comments     Comment[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
}

model Board {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(30)
  description String   @db.VarChar(1500)
  coverImage  String
  ownerId     String
  owner       User     @relation(fields: [ownerId], references: [id])
  members     Member[]
  lists       List[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum BoardRole {
  ADMIN
  MEMBER
}

model Member {
  id        String    @id @default(uuid())
  userId    String
  boardId   String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  board     Board     @relation(fields: [boardId], references: [id], onDelete: Cascade)
  role      BoardRole @default(MEMBER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model List {
  id        String   @id @default(uuid())
  title     String   @db.VarChar(30)
  position  Int
  boardId   String
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards     Card[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Card {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(30)
  description String?   @db.VarChar(1500)
  position    Int
  listId      String
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  comments    Comment[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  id          String   @id @default(uuid())
  content     String   @db.VarChar(500)
  userId      String
  cardId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  card        Card     @relation(fields: [cardId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
